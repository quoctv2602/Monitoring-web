// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Logging;
using Notifications.Options;

namespace Notifications.DAL.EFModel
{
    public partial class NotificationContext : DbContext
    {
        private Configs _configs;
        private readonly ILogger _logger;
        public NotificationContext(ILogger logger, Configs configs) : base()
        {
            _configs = configs;
            _logger = logger;
        }
        public virtual DbSet<SysEmailServer> SysEmailServer { get; set; }
        public virtual DbSet<SysEnvironment> SysEnvironment { get; set; }
        public virtual DbSet<SysMonitoring> SysMonitoring { get; set; }
        public virtual DbSet<SysNodeSetting> SysNodeSetting { get; set; }
        public virtual DbSet<SysThresholdRule> SysThresholdRule { get; set; }

        public virtual DbSet<TransMessageLog> TransMessageLog { get; set; }
        public virtual DbSet<TransSystemHealth> TransSystemHealth { get; set; }
        // DTO
        public DbSet<TransSystemHealthDTO> TransSystemHealthDTO { get; set; }
        public DbSet<TransSystemHealthProcessService> TransSystemHealthProcessService { get; set; }
        public DbSet<StatisticsDTO> StatisticsDTO { get; set; }
        public DbSet<StatisticsDTO_FreeDisk> StatisticsDTO_FreeDisk { get; set; }

        public virtual DbSet<SysNotificationDetail> SysNotificationDetail { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SysEmailServer>(entity =>
            {
                entity.ToTable("Sys_EmailServer");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayName).HasMaxLength(250);

                entity.Property(e => e.EnableSsl)
                    .HasColumnName("EnableSSL")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.FromEmail)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.SmtpServer)
                    .IsRequired()
                    .HasMaxLength(250);

                entity.Property(e => e.UserName).HasMaxLength(250);
            });

            modelBuilder.Entity<SysEnvironment>(entity =>
            {
                entity.ToTable("Sys_Environment");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Name).HasMaxLength(250);
            });

            modelBuilder.Entity<SysMonitoring>(entity =>
            {
                entity.ToTable("Sys_Monitoring");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Unit)
                    .HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(255);
            });

            modelBuilder.Entity<SysNodeSetting>(entity =>
            {
                entity.ToTable("Sys_Node_Setting");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(1000);

                entity.Property(e => e.EnvironmentId).HasColumnName("EnvironmentID");

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.NodeName).HasMaxLength(64);

                entity.Property(e => e.ServiceList).HasMaxLength(4000);
            });

            modelBuilder.Entity<SysThresholdRule>(entity =>
            {
                entity.ToTable("Sys_Threshold_Rule");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnvironmentId).HasColumnName("EnvironmentID");

                entity.Property(e => e.MachineName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.MonitoringName).HasMaxLength(255);

                entity.Property(e => e.NodeSetting).HasColumnName("Node_Setting");
            });

            modelBuilder.Entity<TransMessageLog>(entity =>
            {
                entity.ToTable("Trans_Message_Log");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.CreatedBy).HasMaxLength(100);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmailBcc).HasColumnName("EmailBCC");

                entity.Property(e => e.EmailBody).HasColumnType("ntext");

                entity.Property(e => e.EmailCc).HasColumnName("EmailCC");

                entity.Property(e => e.EmailSubject).HasMaxLength(2000);
            });

            modelBuilder.Entity<TransSystemHealth>(entity =>
            {
                entity.ToTable("Trans_System_Health");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Cpuinfo).HasColumnName("CPUInfo");

                entity.Property(e => e.Cpuover).HasColumnName("CPUOver");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EnvironmentId).HasColumnName("EnvironmentID");

                entity.Property(e => e.ErrorMessage).HasColumnName("Error_Message");

                entity.Property(e => e.Ipaddress)
                    .HasMaxLength(50)
                    .HasColumnName("IPAddress");

                entity.Property(e => e.MachineName).HasMaxLength(500);

                entity.Property(e => e.RequestId).HasColumnName("RequestID");

                entity.Property(e => e.RequestTime).HasColumnType("datetime");

                entity.Property(e => e.ResponseTime).HasColumnType("datetime");
            });

            // DTO
            modelBuilder.Entity<TransSystemHealthDTO>().HasNoKey();
            modelBuilder.Entity<TransSystemHealthProcessService>().HasNoKey();
            modelBuilder.Entity<StatisticsDTO>().HasNoKey();
            modelBuilder.Entity<StatisticsDTO_FreeDisk>().HasNoKey(); 
            modelBuilder.Entity<SysNotificationDetail>().HasNoKey(); 




            OnModelCreatingPartial(modelBuilder);
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(_configs.DatabaseSettings.NotificationContext,
                       builder => {
                           builder.ExecutionStrategy(c =>
                                new NotificationModelExecutionStrategy(c,
                                     _configs.AppSettings.MaxRetryDBCount,
                                    TimeSpan.FromSeconds(_configs.AppSettings.MaxDelayRetryingDB), _logger));
                           builder.CommandTimeout(_configs.AppSettings.CommandTimeout);
                       }
                   );

            }
        }
        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}